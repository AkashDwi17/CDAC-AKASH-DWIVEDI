import java.util.*;
public class Main {
    public static class Heap {
        ArrayList <Integer> list = new ArrayList<>();

        public void add (int data){
            list.add (data);
            int x = list.size()-1;
            int par = (x-1)/2;

            while (list.get(x) < list.get(par)){
                int temp = list.get(x);
                list.set (ximport java.util.*;
public class Main {
    public static class Edge{
        int src;
        int dest;
        int wt;
        public Edge (int s, int d, int w){
            this.src = s;
            this.dest = d;
            this.wt = w;
        }
    }
    public static void createGraph (ArrayList<Edge> graph[]){
        for (int i=0; i<graph.length; i++){
            graph[i] = new ArrayList<>();
        }
        graph[0].add (new Edge(0,1,1));
        graph[0].add (new Edge(0,2,1));

        graph[1].add (new Edge(1,0,1));
        graph[1].add (new Edge(1,3,1));

        graph[2].add (new Edge(2,0,1));
        graph[2].add (new Edge(2,4,1));

        graph[3].add (new Edge(3,1,1));
        graph[3].add (new Edge(3,4,1));
        graph[3].add (new Edge(3,5,1));

        graph[4].add (new Edge(4,2,1));
        graph[4].add (new Edge(4,3,1));
        graph[4].add (new Edge(4,5,1));

        graph[5].add (new Edge(5,3,1));
        graph[5].add (new Edge(5,4,1));
        graph[5].add (new Edge(5,6,1));

        graph[6].add (new Edge(6,5,1));
    }

    // BFS

    public static void bfs (ArrayList<Edge> graph[]){
        boolean vis[] = new boolean[graph.length];
        Queue <Integer> q = new LinkedList<>();
        
        q.add (0);
        while (!q.isEmpty()){
            int curr = q.remove();
            
            if (!vis[curr]){
                System.out.print(curr+" ");
                vis[curr] = true;

                for (int i=0; i<graph[curr].size(); i++){
                    Edge e = graph[curr].get(i);
                    q.add (e.dest);
                }
            }

        }
    }
    
    public static void dfs (ArrayList<Edge> graph[], boolean vis[], int curr){
        System.out.print(curr+" ");
        vis[curr] = true;

        for (int i = 0; i<graph[curr].size(); i++){
            Edge e = graph[curr].get(i);
            if (!vis[e.dest]){
                dfs(graph, vis, e.dest);
            }
        }
    }
    public static void main (String args[]){
        int v = 7;
        ArrayList <Edge> graph[] = new ArrayList[v];

        createGraph(graph);
        dfs(graph, new boolean[v], 0); 
    }
}, list.get(par));
                list.set (par, temp);
            }
        }
        public int peek (){
            return list.get(0);
        }

        public void heapify (int i){
            int left = 2*i+1;
            int right = 2*i+2;
            int minIdx = i;

            if (left < list.size() && list.get (minIdx) > list.get(left)){
                minIdx = left;
            }
            if (right < list.size() && list.get(minIdx) > list.get(right)){
                minIdx = right;
            }

            if (minIdx != i){
                int temp = list.get(i);
                list.set (i, list.get(minIdx));
                list.set (minIdx, temp);

                heapify(minIdx);
            }
        }

        public int remove (){
            int data = list.get (0);

            int temp = list.get(0);
            list.set (0, list.get(list.size()-1));
            list.set (list.size()-1, temp);

            list.remove (list.size()-1);

            heapify (0);
            return data;
        }
        public boolean isEmpty(){
            return list.size() == 0;
        }
    }
    public static void main (String args[]){
        Heap h = new Heap ();
        h.add (3);
        h.add (4);
        h.add (1);
        h.add (5);

        while (!h.isEmpty()){
            System.out.print(h.peek()+" ");
            h.remove();
        }
    }
}